# Direct log messages to stdout
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

# Direct log messages to a log file and split daily
appender.rolling.type = RollingFile
appender.rolling.name = RollingFile
# The active log file that will receive the log events
appender.rolling.fileName = logs/app.log
appender.rolling.filePattern = logs/app-%d{yyyy-MM-dd}.log
appender.rolling.layout.type = PatternLayout
# This is the pattern for the log messages displayed in the log file
appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
# Sets a rolling policy, with an interval of 1 (day, since no time unit is defined)
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy
# There's a delete action in the rollover strategy. Log files meeting the deletion conditions are deleted when a rollover occurs
appender.rolling.strategy.delete.type = Delete
# Sets the root directory to be scanned during the deletion process
appender.rolling.strategy.delete.basePath = logs
# Sets how far down in the directory tree the scanner should go
appender.rolling.strategy.delete.maxDepth = 2
# Triggers deletion of a file based on the last modified condition
appender.rolling.strategy.delete.condition.type = IfLastModified
# Deletes files older than 30 days
appender.rolling.strategy.delete.condition.age = 30d

# Sets the root logger level to WARN, only WARN and more critical (ERROR & FATAL) are logged
rootLogger.level = WARN
rootLogger.appenderRefs = stdout, rolling
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.rolling.ref = RollingFile